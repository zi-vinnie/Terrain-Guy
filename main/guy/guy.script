local camera = require "orthographic.camera"

local GRAVITY = 0.1
local JUMP = 4
local FALL_MAX = 10
local SPEED = 2
local JUMPS = 1

function init(self)
	self.move = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.anim = vmath.vector3()
	self.jumps = 0
	self.jumping = false
	msg.post('.', 'acquire_input_focus')
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function anim(self)
	if self.anim ~= self.dir and self.move.x ~= 0 then
		sprite.play_flipbook('#sprite', 'walking')
		if self.dir.x == -1 then 
			sprite.set_hflip("#sprite", true)
		else
			sprite.set_hflip("#sprite", false)
		end
		self.anim = vmath.vector3(self.dir)
	elseif self.move.x == 0 and self.anim ~= vmath.vector3() then
		sprite.play_flipbook("#sprite", "static")
		self.anim = vmath.vector3(0,0,0)
		if self.dir.x == -1 then 
			sprite.set_hflip("#sprite", true)
		else
			sprite.set_hflip("#sprite", false)
		end
	end
end

local function jump(self)
	if self.jumps > 0 then
		self.jumps = self.jumps - 1
		self.move.y = JUMP
		sprite.play_flipbook("#sprite", "jumping")
		self.anim = vmath.vector3()
	end
end

function on_message(self, message_id, message)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("map") then
			if message.distance > 0 then
				if vmath.dot(message.normal, vmath.vector3(0, 1, 0)) > 0.98 then
					go.set_position(go.get_position() + vmath.vector3(0, message.distance, 0))
					self.move.y = 0
					print('reset JUMP')
					self.jumps = JUMPS
				else
					go.set_position(go.get_position() + message.distance*message.normal)
				end
			end
		end
	end
end

function update(self, dt)
	go.set_position(go.get_position() + self.move)
	anim(self)
	gravity(self)
	self.move.x = 0
end

function on_input(self, action_id, action)
	if action_id == hash('right') then
		self.move.x = SPEED
		self.dir.x = 1
	elseif action_id == hash('left') then
		self.move.x = -SPEED
		self.dir.x = -1
	end
	if action_id == hash('jump') and action.pressed then
		jump(self)
	end
end

